{
  "LocalCopy": {
    "type": "object",
    "properties": {
      "path": {
        "type": "string",
        "description": "Required. The path within the user's docker container where\nthis input should be localized to and from, relative to the specified\ndisk's mount point. For example: file.txt,"
      },
      "disk": {
        "description": "Required. The name of the disk where this parameter is\nlocated. Can be the name of one of the disks specified in the\nResources field, or \"boot\", which represents the Docker\ninstance's boot disk and has a mount point of `/`.",
        "type": "string"
      }
    },
    "id": "LocalCopy",
    "description": "LocalCopy defines how a remote file should be copied to and from the VM."
  },
  "DelayedEvent": {
    "id": "DelayedEvent",
    "description": "An event generated whenever a resource limitation or transient error\ndelays execution of a pipeline that was otherwise ready to run.",
    "type": "object",
    "properties": {
      "metrics": {
        "description": "If the delay was caused by a resource shortage, this field lists the\nCompute Engine metrics that are preventing this operation from running\n(for example, `CPUS` or `INSTANCES`). If the particular metric is not\nknown, a single `UNKNOWN` metric will be present.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "cause": {
        "description": "A textual description of the cause of the delay. The string can change\nwithout notice because it is often generated by another service (such as\nCompute Engine).",
        "type": "string"
      }
    }
  },
  "DockerExecutor": {
    "description": "The Docker execuctor specification.",
    "type": "object",
    "properties": {
      "imageName": {
        "description": "Required. Image name from either Docker Hub or Google Container Registry.\nUsers that run pipelines must have READ access to the image.",
        "type": "string"
      },
      "cmd": {
        "description": "Required. The command or newline delimited script to run. The command\nstring will be executed within a bash shell.\n\nIf the command exits with a non-zero exit code, output parameter\nde-localization will be skipped and the pipeline operation's\n`error` field will be populated.\n\nMaximum command string length is 16384.",
        "type": "string"
      }
    },
    "id": "DockerExecutor"
  },
  "Disk": {
    "type": "object",
    "properties": {
      "source": {
        "description": "The full or partial URL of the persistent disk to attach. See\nhttps://cloud.google.com/compute/docs/reference/latest/instances#resource\nand\nhttps://cloud.google.com/compute/docs/disks/persistent-disks#snapshots\nfor more details.",
        "type": "string"
      },
      "name": {
        "description": "Required. The name of the disk that can be used in the pipeline\nparameters. Must be 1 - 63 characters.\nThe name \"boot\" is reserved for system use.",
        "type": "string"
      },
      "type": {
        "enum": [
          "TYPE_UNSPECIFIED",
          "PERSISTENT_HDD",
          "PERSISTENT_SSD",
          "LOCAL_SSD"
        ],
        "description": "Required. The type of the disk to create.",
        "type": "string",
        "enumDescriptions": [
          "Default disk type. Use one of the other options below.",
          "Specifies a Google Compute Engine persistent hard disk. See\nhttps://cloud.google.com/compute/docs/disks/#pdspecs for details.",
          "Specifies a Google Compute Engine persistent solid-state disk. See\nhttps://cloud.google.com/compute/docs/disks/#pdspecs for details.",
          "Specifies a Google Compute Engine local SSD.\nSee https://cloud.google.com/compute/docs/disks/local-ssd for details."
        ]
      },
      "autoDelete": {
        "description": "Deprecated. Disks created by the Pipelines API will be deleted at the end\nof the pipeline run, regardless of what this field is set to.",
        "type": "boolean"
      },
      "sizeGb": {
        "description": "The size of the disk. Defaults to 500 (GB).\nThis field is not applicable for local SSD.",
        "format": "int32",
        "type": "integer"
      },
      "mountPoint": {
        "description": "Required at create time and cannot be overridden at run time.\nSpecifies the path in the docker container where files on\nthis disk should be located. For example, if `mountPoint`\nis `/mnt/disk`, and the parameter has `localPath`\n`inputs/file.txt`, the docker container can access the data at\n`/mnt/disk/inputs/file.txt`.",
        "type": "string"
      },
      "readOnly": {
        "description": "Specifies how a sourced-base persistent disk will be mounted. See\nhttps://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances\nfor more details.\nCan only be set at create time.",
        "type": "boolean"
      }
    },
    "id": "Disk",
    "description": "A Google Compute Engine disk resource specification."
  },
  "Empty": {
    "id": "Empty",
    "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
    "type": "object",
    "properties": {}
  },
  "WorkerReleasedEvent": {
    "type": "object",
    "properties": {
      "instance": {
        "description": "The worker's instance name.",
        "type": "string"
      },
      "zone": {
        "type": "string",
        "description": "The zone the worker was running in."
      }
    },
    "id": "WorkerReleasedEvent",
    "description": "An event generated when the worker VM that was assigned to the pipeline\nhas been released (deleted)."
  },
  "FailedEvent": {
    "type": "object",
    "properties": {
      "code": {
        "enumDescriptions": [
          "Not an error; returned on success\n\nHTTP Mapping: 200 OK",
          "The operation was cancelled, typically by the caller.\n\nHTTP Mapping: 499 Client Closed Request",
          "Unknown error.  For example, this error may be returned when\na `Status` value received from another address space belongs to\nan error space that is not known in this address space.  Also\nerrors raised by APIs that do not return enough error information\nmay be converted to this error.\n\nHTTP Mapping: 500 Internal Server Error",
          "The client specified an invalid argument.  Note that this differs\nfrom `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments\nthat are problematic regardless of the state of the system\n(e.g., a malformed file name).\n\nHTTP Mapping: 400 Bad Request",
          "The deadline expired before the operation could complete. For operations\nthat change the state of the system, this error may be returned\neven if the operation has completed successfully.  For example, a\nsuccessful response from a server could have been delayed long\nenough for the deadline to expire.\n\nHTTP Mapping: 504 Gateway Timeout",
          "Some requested entity (e.g., file or directory) was not found.\n\nNote to server developers: if a request is denied for an entire class\nof users, such as gradual feature rollout or undocumented whitelist,\n`NOT_FOUND` may be used. If a request is denied for some users within\na class of users, such as user-based access control, `PERMISSION_DENIED`\nmust be used.\n\nHTTP Mapping: 404 Not Found",
          "The entity that a client attempted to create (e.g., file or directory)\nalready exists.\n\nHTTP Mapping: 409 Conflict",
          "The caller does not have permission to execute the specified\noperation. `PERMISSION_DENIED` must not be used for rejections\ncaused by exhausting some resource (use `RESOURCE_EXHAUSTED`\ninstead for those errors). `PERMISSION_DENIED` must not be\nused if the caller can not be identified (use `UNAUTHENTICATED`\ninstead for those errors). This error code does not imply the\nrequest is valid or the requested entity exists or satisfies\nother pre-conditions.\n\nHTTP Mapping: 403 Forbidden",
          "The request does not have valid authentication credentials for the\noperation.\n\nHTTP Mapping: 401 Unauthorized",
          "Some resource has been exhausted, perhaps a per-user quota, or\nperhaps the entire file system is out of space.\n\nHTTP Mapping: 429 Too Many Requests",
          "The operation was rejected because the system is not in a state\nrequired for the operation's execution.  For example, the directory\nto be deleted is non-empty, an rmdir operation is applied to\na non-directory, etc.\n\nService implementors can use the following guidelines to decide\nbetween `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:\n (a) Use `UNAVAILABLE` if the client can retry just the failing call.\n (b) Use `ABORTED` if the client should retry at a higher level\n     (e.g., when a client-specified test-and-set fails, indicating the\n     client should restart a read-modify-write sequence).\n (c) Use `FAILED_PRECONDITION` if the client should not retry until\n     the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n     fails because the directory is non-empty, `FAILED_PRECONDITION`\n     should be returned since the client should not retry unless\n     the files are deleted from the directory.\n\nHTTP Mapping: 400 Bad Request",
          "The operation was aborted, typically due to a concurrency issue such as\na sequencer check failure or transaction abort.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 409 Conflict",
          "The operation was attempted past the valid range.  E.g., seeking or\nreading past end-of-file.\n\nUnlike `INVALID_ARGUMENT`, this error indicates a problem that may\nbe fixed if the system state changes. For example, a 32-bit file\nsystem will generate `INVALID_ARGUMENT` if asked to read at an\noffset that is not in the range [0,2^32-1], but it will generate\n`OUT_OF_RANGE` if asked to read from an offset past the current\nfile size.\n\nThere is a fair bit of overlap between `FAILED_PRECONDITION` and\n`OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific\nerror) when it applies so that callers who are iterating through\na space can easily look for an `OUT_OF_RANGE` error to detect when\nthey are done.\n\nHTTP Mapping: 400 Bad Request",
          "The operation is not implemented or is not supported/enabled in this\nservice.\n\nHTTP Mapping: 501 Not Implemented",
          "Internal errors.  This means that some invariants expected by the\nunderlying system have been broken.  This error code is reserved\nfor serious errors.\n\nHTTP Mapping: 500 Internal Server Error",
          "The service is currently unavailable.  This is most likely a\ntransient condition, which can be corrected by retrying with\na backoff. Note that it is not always safe to retry\nnon-idempotent operations.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 503 Service Unavailable",
          "Unrecoverable data loss or corruption.\n\nHTTP Mapping: 500 Internal Server Error"
        ],
        "enum": [
          "OK",
          "CANCELLED",
          "UNKNOWN",
          "INVALID_ARGUMENT",
          "DEADLINE_EXCEEDED",
          "NOT_FOUND",
          "ALREADY_EXISTS",
          "PERMISSION_DENIED",
          "UNAUTHENTICATED",
          "RESOURCE_EXHAUSTED",
          "FAILED_PRECONDITION",
          "ABORTED",
          "OUT_OF_RANGE",
          "UNIMPLEMENTED",
          "INTERNAL",
          "UNAVAILABLE",
          "DATA_LOSS"
        ],
        "description": "The Google standard error code that best describes this failure.",
        "type": "string"
      },
      "cause": {
        "description": "The human-readable description of the cause of the failure.",
        "type": "string"
      }
    },
    "id": "FailedEvent",
    "description": "An event generated when the execution of a pipeline has failed. Note\nthat other events can continue to occur after this event."
  },
  "ContainerKilledEvent": {
    "description": "An event generated when a container is forcibly terminated by the\nworker. Currently, this only occurs when the container outlives the\ntimeout specified by the user.",
    "type": "object",
    "properties": {
      "actionId": {
        "description": "The numeric ID of the action that started the container.",
        "format": "int32",
        "type": "integer"
      }
    },
    "id": "ContainerKilledEvent"
  },
  "PipelineParameter": {
    "description": "Parameters facilitate setting and delivering data into the\npipeline's execution environment. They are defined at create time,\nwith optional defaults, and can be overridden at run time.\n\nIf `localCopy` is unset, then the parameter specifies a string that\nis passed as-is into the pipeline, as the value of the environment\nvariable with the given name.  A default value can be optionally\nspecified at create time. The default can be overridden at run time\nusing the inputs map. If no default is given, a value must be\nsupplied at runtime.\n\nIf `localCopy` is defined, then the parameter specifies a data\nsource or sink, both in Google Cloud Storage and on the Docker container\nwhere the pipeline computation is run. The service account associated with\nthe Pipeline (by\ndefault the project's Compute Engine service account) must have access to the\nGoogle Cloud Storage paths.\n\nAt run time, the Google Cloud Storage paths can be overridden if a default\nwas provided at create time, or must be set otherwise. The pipeline runner\nshould add a key/value pair to either the inputs or outputs map. The\nindicated data copies will be carried out before/after pipeline execution,\njust as if the corresponding arguments were provided to `gsutil cp`.\n\nFor example: Given the following `PipelineParameter`, specified\nin the `inputParameters` list:\n\n```\n{name: \"input_file\", localCopy: {path: \"file.txt\", disk: \"pd1\"}}\n```\n\nwhere `disk` is defined in the `PipelineResources` object as:\n\n```\n{name: \"pd1\", mountPoint: \"/mnt/disk/\"}\n```\n\nWe create a disk named `pd1`, mount it on the host VM, and map\n`/mnt/pd1` to `/mnt/disk` in the docker container.  At\nruntime, an entry for `input_file` would be required in the inputs\nmap, such as:\n\n```\n  inputs[\"input_file\"] = \"gs://my-bucket/bar.txt\"\n```\n\nThis would generate the following gsutil call:\n\n```\n  gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt\n```\n\nThe file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the\nDocker container. Acceptable paths are:\n\n<table>\n  <thead>\n    <tr><th>Google Cloud storage path</th><th>Local path</th></tr>\n  </thead>\n  <tbody>\n    <tr><td>file</td><td>file</td></tr>\n    <tr><td>glob</td><td>directory</td></tr>\n  </tbody>\n</table>\n\nFor outputs, the direction of the copy is reversed:\n\n```\n  gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt\n```\n\nAcceptable paths are:\n\n<table>\n  <thead>\n    <tr><th>Local path</th><th>Google Cloud Storage path</th></tr>\n  </thead>\n  <tbody>\n    <tr><td>file</td><td>file</td></tr>\n    <tr>\n      <td>file</td>\n      <td>directory - directory must already exist</td>\n    </tr>\n    <tr>\n      <td>glob</td>\n      <td>directory - directory will be created if it doesn't exist</td></tr>\n  </tbody>\n</table>\n\nOne restriction due to docker limitations, is that for outputs that are found\non the boot disk, the local path cannot be a glob and must be a file.",
    "type": "object",
    "properties": {
      "name": {
        "description": "Required. Name of the parameter - the pipeline runner uses this string\nas the key to the input and output maps in RunPipeline.",
        "type": "string"
      },
      "description": {
        "description": "Human-readable description.",
        "type": "string"
      },
      "localCopy": {
        "$ref": "LocalCopy",
        "description": "If present, this parameter is marked for copying to and from the VM.\n`LocalCopy` indicates where on the VM the file should be. The value\ngiven to this parameter (either at runtime or using `defaultValue`)\nmust be the remote path where the file should be."
      },
      "defaultValue": {
        "description": "The default value for this parameter. Can be overridden at runtime.\nIf `localCopy` is present, then this must be a Google Cloud Storage path\nbeginning with `gs://`.",
        "type": "string"
      }
    },
    "id": "PipelineParameter"
  },
  "ContainerStoppedEvent": {
    "description": "An event generated when a container exits.",
    "type": "object",
    "properties": {
      "stderr": {
        "description": "The tail end of any content written to standard error by the container.\nIf the content emits large amounts of debugging noise or contains\nsensitive information, you can prevent the content from being printed by\nsetting the `DISABLE_STANDARD_ERROR_CAPTURE` flag.\n\nNote that only a small amount of the end of the stream is captured here.\nThe entire stream is stored in the `/google/logs` directory mounted into\neach action, and can be copied off the machine as described elsewhere.",
        "type": "string"
      },
      "exitStatus": {
        "description": "The exit status of the container.",
        "format": "int32",
        "type": "integer"
      },
      "actionId": {
        "description": "The numeric ID of the action that started this container.",
        "format": "int32",
        "type": "integer"
      }
    },
    "id": "ContainerStoppedEvent"
  },
  "LoggingOptions": {
    "description": "The logging options for the pipeline run.",
    "type": "object",
    "properties": {
      "gcsPath": {
        "description": "The location in Google Cloud Storage to which the pipeline logs\nwill be copied. Can be specified as a fully qualified directory\npath, in which case logs will be output with a unique identifier\nas the filename in that directory, or as a fully specified path,\nwhich must end in `.log`, in which case that path will be\nused, and the user must ensure that logs are not\noverwritten. Stdout and stderr logs from the run are also\ngenerated and output as `-stdout.log` and `-stderr.log`.",
        "type": "string"
      }
    },
    "id": "LoggingOptions"
  },
  "PullStartedEvent": {
    "description": "An event generated when the worker starts pulling an image.",
    "type": "object",
    "properties": {
      "imageUri": {
        "type": "string",
        "description": "The URI of the image that was pulled."
      }
    },
    "id": "PullStartedEvent"
  },
  "UnexpectedExitStatusEvent": {
    "description": "An event generated when the execution of a container results in a\nnon-zero exit status that was not otherwise ignored. Execution will\ncontinue, but only actions that are flagged as `ALWAYS_RUN` will be\nexecuted. Other actions will be skipped.",
    "type": "object",
    "properties": {
      "exitStatus": {
        "description": "The exit status of the container.",
        "format": "int32",
        "type": "integer"
      },
      "actionId": {
        "type": "integer",
        "description": "The numeric ID of the action that started the container.",
        "format": "int32"
      }
    },
    "id": "UnexpectedExitStatusEvent"
  },
  "RunPipelineRequest": {
    "description": "The request to run a pipeline. If `pipelineId` is specified, it\nrefers to a saved pipeline created with CreatePipeline and set as\nthe `pipelineId` of the returned Pipeline object. If\n`ephemeralPipeline` is specified, that pipeline is run once\nwith the given args and not saved. It is an error to specify both\n`pipelineId` and `ephemeralPipeline`. `pipelineArgs`\nmust be specified.",
    "type": "object",
    "properties": {
      "pipelineArgs": {
        "$ref": "RunPipelineArgs",
        "description": "The arguments to use when running this pipeline."
      },
      "pipelineId": {
        "description": "The already created pipeline to run.",
        "type": "string"
      },
      "ephemeralPipeline": {
        "description": "A new pipeline object to run once and then delete.",
        "$ref": "Pipeline"
      }
    },
    "id": "RunPipelineRequest"
  },
  "CancelOperationRequest": {
    "description": "The request message for Operations.CancelOperation.",
    "type": "object",
    "properties": {},
    "id": "CancelOperationRequest"
  },
  "PullStoppedEvent": {
    "description": "An event generated when the worker stops pulling an image.",
    "type": "object",
    "properties": {
      "imageUri": {
        "description": "The URI of the image that was pulled.",
        "type": "string"
      }
    },
    "id": "PullStoppedEvent"
  },
  "RuntimeMetadata": {
    "description": "Runtime metadata that will be populated in the\nruntimeMetadata\nfield of the Operation associated with a RunPipeline execution.",
    "type": "object",
    "properties": {
      "computeEngine": {
        "$ref": "ComputeEngine",
        "description": "Execution information specific to Google Compute Engine."
      }
    },
    "id": "RuntimeMetadata"
  },
  "Operation": {
    "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "The server-assigned name, which is only unique within the same service that originally returns it. For example&#58; `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`"
      },
      "error": {
        "$ref": "Status",
        "description": "The error result of the operation in case of failure or cancellation."
      },
      "metadata": {
        "description": "An OperationMetadata or Metadata object. This will always be returned with the Operation.",
        "type": "object",
        "additionalProperties": {
          "type": "any",
          "description": "Properties of the object. Contains field @type with type URL."
        }
      },
      "done": {
        "type": "boolean",
        "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
      },
      "response": {
        "additionalProperties": {
          "description": "Properties of the object. Contains field @type with type URL.",
          "type": "any"
        },
        "description": "An Empty object.",
        "type": "object"
      }
    },
    "id": "Operation"
  },
  "RunPipelineResponse": {
    "type": "object",
    "properties": {},
    "id": "RunPipelineResponse",
    "description": "The response to the RunPipeline method, returned in the operation's result\nfield on success."
  },
  "Status": {
    "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
    "type": "object",
    "properties": {
      "code": {
        "type": "integer",
        "description": "The status code, which should be an enum value of google.rpc.Code.",
        "format": "int32"
      },
      "message": {
        "type": "string",
        "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client."
      },
      "details": {
        "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
        "type": "array",
        "items": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        }
      }
    },
    "id": "Status"
  },
  "Event": {
    "id": "Event",
    "description": "Carries information about events that occur during pipeline execution.",
    "type": "object",
    "properties": {
      "description": {
        "description": "A human-readable description of the event. Note that these strings can\nchange at any time without notice. Any application logic must use the\ninformation in the `details` field.",
        "type": "string"
      },
      "timestamp": {
        "description": "The time at which the event occurred.",
        "format": "google-datetime",
        "type": "string"
      },
      "details": {
        "description": "Machine-readable details about the event.",
        "type": "object",
        "additionalProperties": {
          "description": "Properties of the object. Contains field @type with type URL.",
          "type": "any"
        }
      }
    }
  },
  "ServiceAccount": {
    "description": "A Google Cloud Service Account.",
    "type": "object",
    "properties": {
      "email": {
        "description": "Email address of the service account. Defaults to `default`,\nwhich uses the compute service account associated with the project.",
        "type": "string"
      },
      "scopes": {
        "description": "List of scopes to be enabled for this service account on the VM.\nThe following scopes are automatically included:\n\n* https://www.googleapis.com/auth/compute\n* https://www.googleapis.com/auth/devstorage.full_control\n* https://www.googleapis.com/auth/genomics\n* https://www.googleapis.com/auth/logging.write\n* https://www.googleapis.com/auth/monitoring.write",
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "id": "ServiceAccount"
  },
  "Pipeline": {
    "id": "Pipeline",
    "description": "The pipeline object. Represents a transformation from a set of input\nparameters to a set of output parameters. The transformation is defined\nas a docker image and command to run within that image. Each pipeline\nis run on a Google Compute Engine VM. A pipeline can be created with the\n`create` method and then later run with the `run` method, or a pipeline can\nbe defined and run all at once with the `run` method.",
    "type": "object",
    "properties": {
      "outputParameters": {
        "description": "Output parameters of the pipeline.",
        "type": "array",
        "items": {
          "$ref": "PipelineParameter"
        }
      },
      "docker": {
        "$ref": "DockerExecutor",
        "description": "Specifies the docker run information."
      },
      "description": {
        "description": "User-specified description.",
        "type": "string"
      },
      "inputParameters": {
        "type": "array",
        "items": {
          "$ref": "PipelineParameter"
        },
        "description": "Input parameters of the pipeline."
      },
      "resources": {
        "$ref": "PipelineResources",
        "description": "Required. Specifies resource requirements for the pipeline run.\nRequired fields:\n\n*\nminimumCpuCores\n\n*\nminimumRamGb"
      },
      "name": {
        "type": "string",
        "description": "Required. A user specified pipeline name that does not have to be unique.\nThis name can be used for filtering Pipelines in ListPipelines."
      },
      "pipelineId": {
        "description": "Unique pipeline id that is generated by the service when CreatePipeline\nis called. Cannot be specified in the Pipeline used in the\nCreatePipelineRequest, and will be populated in the response to\nCreatePipeline and all subsequent Get and List calls. Indicates that the\nservice has registered this pipeline.",
        "type": "string"
      },
      "projectId": {
        "type": "string",
        "description": "Required. The project in which to create the pipeline. The caller must have\nWRITE access."
      }
    }
  },
  "PipelineResources": {
    "description": "The system resources for the pipeline run.",
    "type": "object",
    "properties": {
      "disks": {
        "description": "Disks to attach.",
        "type": "array",
        "items": {
          "$ref": "Disk"
        }
      },
      "bootDiskSizeGb": {
        "type": "integer",
        "description": "The size of the boot disk. Defaults to 10 (GB).",
        "format": "int32"
      },
      "preemptible": {
        "description": "Whether to use preemptible VMs. Defaults to `false`. In order to use this,\nmust be true for both create time and run time. Cannot be true at run time\nif false at create time.",
        "type": "boolean"
      },
      "minimumRamGb": {
        "description": "The minimum amount of RAM to use. Defaults to 3.75 (GB)",
        "format": "double",
        "type": "number"
      },
      "zones": {
        "description": "List of Google Compute Engine availability zones to which resource\ncreation will restricted. If empty, any zone may be chosen.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "minimumCpuCores": {
        "type": "integer",
        "description": "The minimum number of cores to use. Defaults to 1.",
        "format": "int32"
      },
      "acceleratorType": {
        "description": "Optional. The Compute Engine defined accelerator type.\nBy specifying this parameter, you will download and install the following\nthird-party software onto your managed Compute Engine instances: NVIDIA®\nTesla® drivers and NVIDIA® CUDA toolkit.\nPlease see https://cloud.google.com/compute/docs/gpus/ for a list of\navailable accelerator types.",
        "type": "string"
      },
      "acceleratorCount": {
        "description": "Optional. The number of accelerators of the specified type to attach.\nBy specifying this parameter, you will download and install the following\nthird-party software onto your managed Compute Engine instances:\nNVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.",
        "format": "int64",
        "type": "string"
      },
      "noAddress": {
        "description": "Whether to assign an external IP to the instance. This is an experimental\nfeature that may go away. Defaults to false.\nCorresponds to `--no_address` flag for [gcloud compute instances create]\n(https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).\nIn order to use this, must be true for both create time and run time.\nCannot be true at run time if false at create time. If you need to ssh into\na private IP VM for debugging, you can ssh to a public VM and then ssh into\nthe private VM's Internal IP.  If noAddress is set, this pipeline run may\nonly load docker images from Google Container Registry and not Docker Hub.\nBefore using this, you must\n[configure access to Google services from internal\nIPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).",
        "type": "boolean"
      }
    },
    "id": "PipelineResources"
  },
  "ControllerConfig": {
    "description": "Stores the information that the controller will fetch from the\nserver in order to run. Should only be used by VMs created by the\nPipelines Service and not by end users.",
    "type": "object",
    "properties": {
      "vars": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "image": {
        "type": "string"
      },
      "gcsLogPath": {
        "type": "string"
      },
      "gcsSources": {
        "type": "object",
        "additionalProperties": {
          "$ref": "RepeatedString"
        }
      },
      "gcsSinks": {
        "type": "object",
        "additionalProperties": {
          "$ref": "RepeatedString"
        }
      },
      "disks": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "machineType": {
        "type": "string"
      },
      "cmd": {
        "type": "string"
      }
    },
    "id": "ControllerConfig"
  },
  "OperationEvent": {
    "id": "OperationEvent",
    "description": "An event that occurred during an Operation.",
    "type": "object",
    "properties": {
      "endTime": {
        "description": "Optional time of when event finished. An event can have a start time and no\nfinish time. If an event has a finish time, there must be a start time.",
        "format": "google-datetime",
        "type": "string"
      },
      "startTime": {
        "description": "Optional time of when event started.",
        "format": "google-datetime",
        "type": "string"
      },
      "description": {
        "description": "Required description of event.",
        "type": "string"
      }
    }
  },
  "ListOperationsResponse": {
    "type": "object",
    "properties": {
      "operations": {
        "description": "A list of operations that matches the specified filter in the request.",
        "type": "array",
        "items": {
          "$ref": "Operation"
        }
      },
      "nextPageToken": {
        "description": "The standard List next-page token.",
        "type": "string"
      }
    },
    "id": "ListOperationsResponse",
    "description": "The response message for Operations.ListOperations."
  },
  "RepeatedString": {
    "type": "object",
    "properties": {
      "values": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "id": "RepeatedString"
  },
  "OperationMetadata": {
    "description": "Metadata describing an Operation.",
    "type": "object",
    "properties": {
      "createTime": {
        "description": "The time at which the job was submitted to the Genomics service.",
        "format": "google-datetime",
        "type": "string"
      },
      "labels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Optionally provided by the caller when submitting the request that creates\nthe operation.",
        "type": "object"
      },
      "projectId": {
        "description": "The Google Cloud Project in which the job is scoped.",
        "type": "string"
      },
      "clientId": {
        "description": "This field is deprecated. Use `labels` instead. Optionally provided by the\ncaller when submitting the request that creates the operation.",
        "type": "string"
      },
      "events": {
        "type": "array",
        "items": {
          "$ref": "OperationEvent"
        },
        "description": "Optional event messages that were generated during the job's execution.\nThis also contains any warnings that were generated during import\nor export."
      },
      "endTime": {
        "description": "The time at which the job stopped running.",
        "format": "google-datetime",
        "type": "string"
      },
      "startTime": {
        "description": "The time at which the job began to run.",
        "format": "google-datetime",
        "type": "string"
      },
      "request": {
        "additionalProperties": {
          "description": "Properties of the object. Contains field @type with type URL.",
          "type": "any"
        },
        "description": "The original request that started the operation. Note that this will be in\ncurrent version of the API. If the operation was started with v1beta2 API\nand a GetOperation is performed on v1 API, a v1 request will be returned.",
        "type": "object"
      },
      "runtimeMetadata": {
        "additionalProperties": {
          "type": "any",
          "description": "Properties of the object. Contains field @type with type URL."
        },
        "description": "Runtime metadata on this Operation.",
        "type": "object"
      }
    },
    "id": "OperationMetadata"
  },
  "ListPipelinesResponse": {
    "description": "The response of ListPipelines. Contains at most `pageSize`\npipelines. If it contains `pageSize` pipelines, and more pipelines\nexist, then `nextPageToken` will be populated and should be\nused as the `pageToken` argument to a subsequent ListPipelines\nrequest.",
    "type": "object",
    "properties": {
      "nextPageToken": {
        "description": "The token to use to get the next page of results.",
        "type": "string"
      },
      "pipelines": {
        "description": "The matched pipelines.",
        "type": "array",
        "items": {
          "$ref": "Pipeline"
        }
      }
    },
    "id": "ListPipelinesResponse"
  },
  "RunPipelineArgs": {
    "description": "The pipeline run arguments.",
    "type": "object",
    "properties": {
      "clientId": {
        "description": "This field is deprecated. Use `labels` instead. Client-specified pipeline\noperation identifier.",
        "type": "string"
      },
      "serviceAccount": {
        "description": "The Google Cloud Service Account that will be used to access data and\nservices. By default, the compute service account associated with\n`projectId` is used.",
        "$ref": "ServiceAccount"
      },
      "inputs": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "Pipeline input arguments; keys are defined in the pipeline documentation.\nAll input parameters that do not have default values  must be specified.\nIf parameters with defaults are specified here, the defaults will be\noverridden."
      },
      "labels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Labels to apply to this pipeline run. Labels will also be applied to\ncompute resources (VM, disks) created by this pipeline run. When listing\noperations, operations can filtered by labels.\nLabel keys may not be empty; label values may be empty. Non-empty labels\nmust be 1-63 characters long, and comply with [RFC1035]\n(https://www.ietf.org/rfc/rfc1035.txt).\nSpecifically, the name must be 1-63 characters long and match the regular\nexpression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first\ncharacter must be a lowercase letter, and all following characters must be\na dash, lowercase letter, or digit, except the last character, which cannot\nbe a dash.",
        "type": "object"
      },
      "logging": {
        "$ref": "LoggingOptions",
        "description": "Required. Logging options. Used by the service to communicate results\nto the user."
      },
      "keepVmAliveOnFailureDuration": {
        "description": "How long to keep the VM up after a failure (for example docker command\nfailed, copying input or output files failed, etc). While the VM is up, one\ncan ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.",
        "format": "google-duration",
        "type": "string"
      },
      "resources": {
        "$ref": "PipelineResources",
        "description": "Specifies resource requirements/overrides for the pipeline run."
      },
      "outputs": {
        "description": "Pipeline output arguments; keys are defined in the pipeline\ndocumentation.  All output parameters of without default values\nmust be specified.  If parameters with defaults are specified\nhere, the defaults will be overridden.",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "projectId": {
        "description": "Required. The project in which to run the pipeline. The caller must have\nWRITER access to all Google Cloud services and resources (e.g. Google\nCompute Engine) will be used.",
        "type": "string"
      }
    },
    "id": "RunPipelineArgs"
  },
  "ContainerStartedEvent": {
    "type": "object",
    "properties": {
      "actionId": {
        "description": "The numeric ID of the action that started this container.",
        "format": "int32",
        "type": "integer"
      },
      "ipAddress": {
        "description": "The public IP address that can be used to connect to the container. This\nfield is only populated when at least one port mapping is present. If the\ninstance was created with a private address, this field will be empty even\nif port mappings exist.",
        "type": "string"
      },
      "portMappings": {
        "description": "The container-to-host port mappings installed for this container. This\nset will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag\nas well as any specified in the `Action` definition.",
        "type": "object",
        "additionalProperties": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "id": "ContainerStartedEvent",
    "description": "An event generated when a container starts."
  },
  "SetOperationStatusRequest": {
    "description": "Request to set operation status. Should only be used by VMs\ncreated by the Pipelines Service and not by end users.",
    "type": "object",
    "properties": {
      "errorCode": {
        "enumDescriptions": [
          "Not an error; returned on success\n\nHTTP Mapping: 200 OK",
          "The operation was cancelled, typically by the caller.\n\nHTTP Mapping: 499 Client Closed Request",
          "Unknown error.  For example, this error may be returned when\na `Status` value received from another address space belongs to\nan error space that is not known in this address space.  Also\nerrors raised by APIs that do not return enough error information\nmay be converted to this error.\n\nHTTP Mapping: 500 Internal Server Error",
          "The client specified an invalid argument.  Note that this differs\nfrom `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments\nthat are problematic regardless of the state of the system\n(e.g., a malformed file name).\n\nHTTP Mapping: 400 Bad Request",
          "The deadline expired before the operation could complete. For operations\nthat change the state of the system, this error may be returned\neven if the operation has completed successfully.  For example, a\nsuccessful response from a server could have been delayed long\nenough for the deadline to expire.\n\nHTTP Mapping: 504 Gateway Timeout",
          "Some requested entity (e.g., file or directory) was not found.\n\nNote to server developers: if a request is denied for an entire class\nof users, such as gradual feature rollout or undocumented whitelist,\n`NOT_FOUND` may be used. If a request is denied for some users within\na class of users, such as user-based access control, `PERMISSION_DENIED`\nmust be used.\n\nHTTP Mapping: 404 Not Found",
          "The entity that a client attempted to create (e.g., file or directory)\nalready exists.\n\nHTTP Mapping: 409 Conflict",
          "The caller does not have permission to execute the specified\noperation. `PERMISSION_DENIED` must not be used for rejections\ncaused by exhausting some resource (use `RESOURCE_EXHAUSTED`\ninstead for those errors). `PERMISSION_DENIED` must not be\nused if the caller can not be identified (use `UNAUTHENTICATED`\ninstead for those errors). This error code does not imply the\nrequest is valid or the requested entity exists or satisfies\nother pre-conditions.\n\nHTTP Mapping: 403 Forbidden",
          "The request does not have valid authentication credentials for the\noperation.\n\nHTTP Mapping: 401 Unauthorized",
          "Some resource has been exhausted, perhaps a per-user quota, or\nperhaps the entire file system is out of space.\n\nHTTP Mapping: 429 Too Many Requests",
          "The operation was rejected because the system is not in a state\nrequired for the operation's execution.  For example, the directory\nto be deleted is non-empty, an rmdir operation is applied to\na non-directory, etc.\n\nService implementors can use the following guidelines to decide\nbetween `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:\n (a) Use `UNAVAILABLE` if the client can retry just the failing call.\n (b) Use `ABORTED` if the client should retry at a higher level\n     (e.g., when a client-specified test-and-set fails, indicating the\n     client should restart a read-modify-write sequence).\n (c) Use `FAILED_PRECONDITION` if the client should not retry until\n     the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n     fails because the directory is non-empty, `FAILED_PRECONDITION`\n     should be returned since the client should not retry unless\n     the files are deleted from the directory.\n\nHTTP Mapping: 400 Bad Request",
          "The operation was aborted, typically due to a concurrency issue such as\na sequencer check failure or transaction abort.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 409 Conflict",
          "The operation was attempted past the valid range.  E.g., seeking or\nreading past end-of-file.\n\nUnlike `INVALID_ARGUMENT`, this error indicates a problem that may\nbe fixed if the system state changes. For example, a 32-bit file\nsystem will generate `INVALID_ARGUMENT` if asked to read at an\noffset that is not in the range [0,2^32-1], but it will generate\n`OUT_OF_RANGE` if asked to read from an offset past the current\nfile size.\n\nThere is a fair bit of overlap between `FAILED_PRECONDITION` and\n`OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific\nerror) when it applies so that callers who are iterating through\na space can easily look for an `OUT_OF_RANGE` error to detect when\nthey are done.\n\nHTTP Mapping: 400 Bad Request",
          "The operation is not implemented or is not supported/enabled in this\nservice.\n\nHTTP Mapping: 501 Not Implemented",
          "Internal errors.  This means that some invariants expected by the\nunderlying system have been broken.  This error code is reserved\nfor serious errors.\n\nHTTP Mapping: 500 Internal Server Error",
          "The service is currently unavailable.  This is most likely a\ntransient condition, which can be corrected by retrying with\na backoff. Note that it is not always safe to retry\nnon-idempotent operations.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 503 Service Unavailable",
          "Unrecoverable data loss or corruption.\n\nHTTP Mapping: 500 Internal Server Error"
        ],
        "enum": [
          "OK",
          "CANCELLED",
          "UNKNOWN",
          "INVALID_ARGUMENT",
          "DEADLINE_EXCEEDED",
          "NOT_FOUND",
          "ALREADY_EXISTS",
          "PERMISSION_DENIED",
          "UNAUTHENTICATED",
          "RESOURCE_EXHAUSTED",
          "FAILED_PRECONDITION",
          "ABORTED",
          "OUT_OF_RANGE",
          "UNIMPLEMENTED",
          "INTERNAL",
          "UNAVAILABLE",
          "DATA_LOSS"
        ],
        "type": "string"
      },
      "timestampEvents": {
        "type": "array",
        "items": {
          "$ref": "TimestampEvent"
        }
      },
      "operationId": {
        "type": "string"
      },
      "errorMessage": {
        "type": "string"
      },
      "validationToken": {
        "type": "string",
        "format": "uint64"
      }
    },
    "id": "SetOperationStatusRequest"
  },
  "ComputeEngine": {
    "type": "object",
    "properties": {
      "instanceName": {
        "description": "The instance on which the operation is running.",
        "type": "string"
      },
      "zone": {
        "description": "The availability zone in which the instance resides.",
        "type": "string"
      },
      "machineType": {
        "description": "The machine type of the instance.",
        "type": "string"
      },
      "diskNames": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "The names of the disks that were created for this pipeline."
      }
    },
    "id": "ComputeEngine",
    "description": "Describes a Compute Engine resource that is being managed by a running\npipeline."
  },
  "WorkerAssignedEvent": {
    "id": "WorkerAssignedEvent",
    "description": "An event generated after a worker VM has been assigned to run the\npipeline.",
    "type": "object",
    "properties": {
      "instance": {
        "type": "string",
        "description": "The worker's instance name."
      },
      "zone": {
        "type": "string",
        "description": "The zone the worker is running in."
      },
      "machineType": {
        "description": "The machine type that was assigned for the worker.",
        "type": "string"
      }
    }
  },
  "TimestampEvent": {
    "description": "Stores the list of events and times they occured for major events in job\nexecution.",
    "type": "object",
    "properties": {
      "timestamp": {
        "description": "The time this event occured.",
        "format": "google-datetime",
        "type": "string"
      },
      "description": {
        "description": "String indicating the type of event",
        "type": "string"
      }
    },
    "id": "TimestampEvent"
  }
}
